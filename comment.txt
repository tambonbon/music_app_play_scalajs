db {
  # You can declare as many datasources as you want.
  # By convention, the default datasource is named `default`

  # https://www.playframework.com/documentation/latest/Developing-with-the-H2-Database
  default.driver = org.h2.Driver
  default.url = "jdbc:h2:mem:play"
  default.username = sa
  default.password = ""

  # You can turn on SQL logging for any datasource
  # https://www.playframework.com/documentation/latest/Highlights25#Logging-SQL-statements
  #default.logSql=true
}

slick.dbs.default.profile="slick.jdbc.H2Profile$"
slick.dbs.default.db.profile="org.h2.Driver"
slick.dbs.default.db.url="jdbc:h2:mem:play;DB_CLOSE_DELAY=-1"

def findAll(): Future[Seq[FullAlbum]] = {
    val query = albums
      .join(songs).on(_.id === _.albumId)
    dbConfig.db.run(query.result).map( alb =>
      alb.groupBy(_._1.id).map { case(_, tup) =>
        val (album, _) = tup.head
        val songs = tup.map(_._2)
        FullAlbum(album, songs)
      }.toSeq
    )
  }row =>
           val (albumRow) = row._1
           val songsRow = row._2.map(_._2)
           (albumRow,songsRow)

  def artistAndSong(): Future[Seq[CreatePlayingForm]] = {
    val query = albums
      .join(albumSongs).on(_.id === _.albumID)
      .join(songs).on(_._2.songID === _.songId)

    dbConfig.db.run(query.result).map { playing =>
      val artists = playing.map(_._1._1.artist) //maybe there's a bug // it was playing.map(_._1._1.artist)
      val songs  = playing.map(_._2.title)
      for (
        artist <- artists;
        song <- songs) yield {
        CreatePlayingForm(artist, song)
      }
        // TODO: This is a list of all possible combination
        //  - Change this
    }
  }